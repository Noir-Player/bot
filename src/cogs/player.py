import datetime

import disnake
from disnake.ext import commands

from components.ui.objects.context import EmbedContext
from components.ui.objects.effects import EmbedEffects
from components.ui.objects.player import state
from objects.bot import NoirBot
from objects.exceptions import *
from validators.player import check_player_decorator


class PlayerCog(commands.Cog):
    def __init__(self, bot: NoirBot):
        self.bot = bot
        self.pool = bot.pool

    def _calculate_seconds(self, time_code):
        if len(time_code) == 5:
            time_format = "%M:%S"
        elif len(time_code) == 8:
            time_format = "%H:%M:%S"
        else:
            return None

        try:
            time_obj = datetime.strptime(time_code, time_format)
            seconds = (time_obj - datetime(1900, 1, 1)).total_seconds()
            return seconds
        except BaseException:
            return None

    # -------------------------------------------------------------------------------------------------------------------------------------
    # –ü–ª–µ–µ—Ä

    # TODO: Database

    @commands.slash_command(name="player", dm_permission=False)
    async def _player(self, ctx):
        pass

    @check_player_decorator(with_defer=False)
    @_player.sub_command(description="‚≠ê | —Ç–µ–∫—É—â–∏–π —Ç—Ä–µ–∫")
    async def now(
        self,
        ctx,
        hidden: int = commands.Param(
            default=1,
            description="–í–∏–¥–∏–º–æ—Å—Ç—å –≤—Å–µ–º",
            choices=[
                disnake.OptionChoice(name="–°–∫—Ä—ã—Ç—å", value=1),
                disnake.OptionChoice(name="–ü–æ–∫–∞–∑–∞—Ç—å", value=0),
            ],
        ),
    ):
        await ctx.response.defer(ephemeral=bool(hidden))
        player = self.bot.node.get_player(ctx.guild_id)
        await ctx.send(embed=await state(player), ephemeral=True)

    @check_player_decorator(with_defer=False)
    @_player.sub_command(description="üü£ | –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ")
    async def menu(
        self,
        ctx,
        hidden: int = commands.Param(
            default=1,
            description="–í–∏–¥–∏–º–æ—Å—Ç—å –≤—Å–µ–º",
            choices=[
                disnake.OptionChoice(name="–°–∫—Ä—ã—Ç—å", value=1),
                disnake.OptionChoice(name="–ü–æ–∫–∞–∑–∞—Ç—å", value=0),
            ],
        ),
    ):
        await ctx.response.defer(ephemeral=bool(hidden))
        await EmbedContext(self.bot.node).send(ctx, ephemeral=hidden)

    @check_player_decorator()
    @_player.sub_command(description="üü£ | –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –∑–≤—É–∫–∞")
    async def volume(
        self,
        ctx,
        volume: int = commands.Param(description="–≥—Ä–æ–º–∫–æ—Å—Ç—å –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö –æ—Ç 0 –¥–æ 500"),
    ):
        player = self.bot.node.get_player(ctx.guild_id)
        await player.set_volume(volume)
        await ctx.delete_original_message()

    @check_player_decorator()
    @_player.sub_command(description="üü£ | –ø–∞—É–∑–∞")
    async def pause(self, ctx):
        player = self.bot.node.get_player(ctx.guild_id)
        if player.is_playing or player.is_paused:
            await player.set_pause()
        await ctx.delete_original_message()

    @check_player_decorator()
    @_player.sub_command(description="üü£ | –ø–µ—Ä–µ–º–æ—Ç–∞—Ç—å")
    async def seek(
        self,
        ctx,
        timecode: str = commands.Param(
            description="—Ç–∞–π–º–∫–æ–¥ 00:00 –∏–ª–∏ 00:00:00", min_length=5, max_length=8
        ),
    ):
        player = self.bot.node.get_player(ctx.guild_id)
        mseconnds = self._calculate_seconds(timecode)
        if mseconnds:
            await player.seek(mseconnds * 1000)
            await player.update_controller_once()
        await ctx.delete_original_message()

    @check_player_decorator()
    @_player.sub_command(description="üü£ | –ø–µ—Ä–µ–º–æ—Ç–∞—Ç—å (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)")
    async def rewind(
        self, ctx, seconds: int = commands.Param(description="–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∫—É–Ω–¥")
    ):
        player = self.bot.node.get_player(ctx.guild_id)
        await player.seek(player.position + float(seconds * 1000))
        await player.update_controller_once()
        await ctx.delete_original_message()

    @check_player_decorator()
    @_player.sub_command(description="üü£ | –æ—Ç–∫–ª—é—á–∏—Ç—å –ø–ª–µ–µ—Ä")
    async def stop(self, ctx):
        self.bot.node.get_player(ctx.guild_id)
        try:
            await ctx.guild.voice_client.disconnect(force=True)
        except BaseException:
            pass

        await ctx.delete_original_message()

    @check_player_decorator(with_connection=True)
    @_player.sub_command(description="üü£ | –ø–æ–¥–∫–ª—é—á–∏—Ç—å Noir –∫ –≤–æ–π—Å—É")
    async def join(self, ctx):
        await ctx.delete_original_message()

    # -------------------------------------------------------------------------------------------------------------------------------------
    # –≠—Ñ—Ñ–µ–∫—Ç—ã

    @_player.sub_command_group()
    async def effects(self, ctx):
        pass

    @check_player_decorator()
    @effects.sub_command(description="‚≠ê | —ç—Ñ—Ñ–µ–∫—Ç—ã")
    async def open(
        self,
        ctx,
        hidden: bool = commands.Param(
            default=True,
            description="–í–∏–¥–∏–º–æ—Å—Ç—å –≤—Å–µ–º",
            choices=[
                disnake.OptionChoice(name="–°–∫—Ä—ã—Ç—å", value=True),
                disnake.OptionChoice(name="–ü–æ–∫–∞–∑–∞—Ç—å", value=False),
            ],
        ),
    ):
        await EmbedEffects(self.bot.node).send(ctx, ephemeral=hidden)

    @check_player_decorator()
    @effects.sub_command(description="üü£ | —Å–±—Ä–æ—Å–∏—Ç—å —ç—Ñ—Ñ–µ–∫—Ç—ã")
    async def reset(self, ctx):
        player = self.bot.node.get_player(ctx.guild_id)
        await player.reset_filters()
        await ctx.delete_original_message()

    # -------------------------------------------------------------------------------------------------------------------------------------
    # –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä

    @_player.sub_command_group()
    async def embed(self, ctx):
        pass

    @check_player_decorator()
    @embed.sub_command(description="‚≠ê | –≥–¥–µ —ç–º–±–µ–¥ –ø–ª–µ–µ—Ä–∞?")
    async def message(self, ctx):
        player = self.bot.node.get_player(ctx.guild_id)

        try:
            return await ctx.send(
                embed=self.bot.embedding.get(
                    title="üü£ | –†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ",
                    description=f"[‚≠ê –∫–ª–∏–∫]({player.controller.jump_url})",
                ),
                ephemeral=True,
            )
        except BaseException:
            return await ctx.send(
                embed=self.bot.embedding.get(
                    title="üü† | –ù–µ –Ω–∞–π–¥–µ–Ω–æ",
                    description="–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –ø–ª–µ–µ—Ä–∞. –í—ã –ø–æ-–ø—Ä–µ–∂–Ω–µ–º—É –º–æ–∂–µ—Ç–µ —Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–∫—É—â–∏–π —Ç—Ä–µ–∫ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É `/now playing`",
                    color="warning",
                ),
                ephemeral=True,
            )

    @check_player_decorator()
    @embed.sub_command(description="üü£ | –ø–æ–≤—Ç–æ—Ä–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä")
    async def resend(self, ctx):
        player = self.bot.node.get_player(ctx.guild_id)

        if player:
            await player.update_controller_once(True, ctx)
        else:
            return await ctx.send(
                embed=self.bot.embedding.get(
                    title="üü† | –ù–µ –Ω–∞–π–¥–µ–Ω–æ",
                    description="–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–ª–µ–µ—Ä. –í—ã –ø–æ-–ø—Ä–µ–∂–Ω–µ–º—É –º–æ–∂–µ—Ç–µ —Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–∫—É—â–∏–π —Ç—Ä–µ–∫ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É `/now playing`",
                    color="warning",
                ),
                ephemeral=True,
            )


def setup(bot: commands.Bot):
    bot.add_cog(PlayerCog(bot))
