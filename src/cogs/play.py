import json
import time

import disnake
from disnake.ext import commands

import services.persiktunes as persik
from components.modals.multiple import AddMultiple
from components.ui.views import StarsView
from objects.bot import NoirBot
from objects.exceptions import *
from objects.player import NoirPlayer
from validators.player import check_player_decorator

"""–°–ø–∏—Å–æ–∫ —Å—Ç–∞–Ω—Ü–∏–π –ø–æ json"""

radio = json.load(open("data/resources/radio.json", "r", encoding="utf-8"))["Record"]


class MusicCog(commands.Cog):
    def __init__(self, bot: NoirBot):
        self.bot = bot
        self.pool = bot.pool

    # -------------------------------------------------------------------------------------------------------------------------------------
    # –ö–û–ú–ê–ù–î–´
    # –ì—Ä—É–ø–ø–∞ play

    @commands.slash_command(name="play", dm_permission=False)
    async def add(self, ctx):
        pass

    @check_player_decorator(with_connection=True)
    @add.sub_command(description="üü£ | –∏–≥—Ä–∞—Ç—å (–≤–Ω–µ –æ—á–µ—Ä–µ–¥–∏)")
    async def now(
        self, ctx, search: str = commands.Param(description="–ø–∏—à–∏—Ç–µ –¥–ª—è –ø–æ–∏—Å–∫–∞... üîç")
    ):
        player: NoirPlayer = self.bot.node.get_player(ctx.guild_id)

        query = await player.search(search, ctx=ctx, requester=ctx.author)

        if await player.queue.put_auto(query) == False:
            return await ctx.edit_original_response(
                embed=self.bot.embedding.get(
                    title="üü† | –ù–µ –Ω–∞–π–¥–µ–Ω–æ",
                    description=("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç—Ä–µ–∫. "),
                    color="warning",
                ),
            )

        await ctx.delete_original_message()

    @check_player_decorator(with_connection=True)
    @add.sub_command(description="üü£ | –∏–≥—Ä–∞—Ç—å")
    async def search(
        self,
        ctx,
        search: str = commands.Param(description="–ü–æ–∏—Å–∫ —Ç—Ä–µ–∫–∞ –∏–ª–∏ –ø–ª–µ–π–ª–∏—Å—Ç–∞... üîç"),
    ):

        player: NoirPlayer = self.bot.node.get_player(ctx.guild_id)

        query = await player.search(
            search,
            ctx=ctx,
            requester=ctx.author,
        )

        if await player.queue.put_auto(query) == False:
            return await ctx.edit_original_response(
                embed=self.bot.embedding.get(
                    title="üü† | –ù–µ –Ω–∞–π–¥–µ–Ω–æ",
                    description=("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç—Ä–µ–∫. "),
                    color="warning",
                ),
            )

        if not player.current:
            await player.play(player.queue.get())

        await ctx.delete_original_message()

    @search.autocomplete("search")
    async def autosearch(self, inter, user_input):
        if not user_input:
            return []

        start = time.perf_counter()

        # if persik.URLRegex.BASE_URL.match(user_input):
        #     return [disnake.OptionChoice(name=f"üîé | {user_input}", value=user_input)]

        # search = await self.bot.node.rest.ytmclient.complete_search(query=user_input)

        # result = []

        # for object in search:
        #     names = []

        #     try:
        #         if object["resultType"] in ("song", "video"):
        #             emoji = "‚≠ê"
        #             (
        #                 names.append(", ".join([i["name"] for i in object["artists"]]))
        #                 if object["artists"]
        #                 else None
        #             )

        #             uri = "https://youtube.com/watch?v=" + object["videoId"]

        #         elif object["resultType"] == "playlist":
        #             emoji = "üìÅ"
        #             (names.append(object["author"]) if object.get("author") else None)

        #             uri = (
        #                 "https://music.youtube.com/playlist?list="
        #                 + object["browseId"][2:]
        #             )

        #         else:
        #             continue
        #     except:
        #         continue

        #     names.append(object["title"])

        #     result.append(
        #         disnake.OptionChoice(
        #             name=(f"{emoji} | " + " - ".join(names))[:100],
        #             value=uri,
        #         )
        #     )

        result = []

        for suggestion in await self.bot.node.rest.ytmclient.search_suggestions(
            user_input
        ):
            result.append(
                disnake.OptionChoice(name=f"üîé | {suggestion}", value=suggestion)
            )

        end = time.perf_counter()

        self.bot._log.debug(f"Autocomplete took {end - start:.3f}s")

        return result

    """–ü–æ–∏—Å–∫ —Ä–∞–¥–∏–æ—Å—Ç–∞–Ω—Ü–∏–∏ –ø–æ json"""

    @check_player_decorator(with_connection=True)
    @add.sub_command(description="üü£ | —Ä–∞–¥–∏–æ—Å—Ç–∞–Ω—Ü–∏–∏")
    async def radio(
        self, ctx, station: str = commands.Param(description="–ø–∏—à–∏—Ç–µ –¥–ª—è –ø–æ–∏—Å–∫–∞... üîç")
    ):

        player: NoirPlayer = self.bot.node.get_player(ctx.guild_id)

        query = (await player.search(query=station, ctx=ctx, requester=ctx.author)).data

        player.queue.set_primary(query)

        await player.play(player.queue.primary)

        await ctx.delete_original_message()

    @radio.autocomplete("station")
    async def autostation(self, inter, user_input):
        list = []

        i = 0
        for name, url in radio.items():
            if user_input.lower() in name.lower() or not user_input:
                list.append(
                    disnake.OptionChoice(
                        name=f"üìª | {name}",
                        value=url,
                    )
                )

                i += 1

                if i == 19:
                    break

        return list

    # TODO : Database

    @check_player_decorator(with_connection=True)
    @add.sub_command(description="üü£ | –∏–≥—Ä–∞—Ç—å (–Ω–µ—Å–∫–æ–ª—å–∫–æ)")
    async def multiple(self, ctx):
        player: NoirPlayer = self.bot.node.get_player(ctx.guild_id)

        await ctx.response.send_modal(AddMultiple(player))

    @check_player_decorator(with_connection=True)
    @add.sub_command(description="üü£ | –∏–≥—Ä–∞—Ç—å (–ø–ª–µ–π–ª–∏—Å—Ç –Ω–∞ noirplayer.su)")
    async def playlist(
        self, ctx, playlist: str = commands.Param(description="–ø–∏—à–∏—Ç–µ –¥–ª—è –ø–æ–∏—Å–∫–∞... üîç")
    ):

        player: NoirPlayer = self.bot.node.get_player(ctx.guild_id)

        playlist = self.bot.db.playlists.get_playlist(playlist)

        if not playlist:
            return await ctx.edit_original_message(
                embed=self.bot.embedding.get(
                    title="üü† | –ù–µ –Ω–∞–π–¥–µ–Ω–æ",
                    description="–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–ª–µ–π–ª–∏—Å—Ç",
                    color="warning",
                ),
                # embed=type_embed(type="error", description="–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–ª–µ–π–ª–∏—Å—Ç")
            )

        if playlist.get("tracks"):
            items = []

            for track in playlist.get("tracks"):
                try:
                    query = (
                        await player.search(
                            query=track.get("url"), ctx=ctx, requester=ctx.author
                        )
                    )[0]

                    if (
                        not player.current
                    ):  # —á—Ç–æ–±—ã –Ω–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞–¥–µ—Ä–∂–∫—É, –∏–≥—Ä–∞—Ç—å –ø–µ—Ä–≤—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π
                        player.queue.put(query)
                        await player.play(player.queue.get())

                    else:
                        items.append(query)

                except:
                    continue

            await player.queue.put_list(items)

        else:
            return await ctx.edit_original_message(
                embed=self.bot.embedding.get(
                    title="üü† | –ü—É—Å—Ç–æ",
                    description="–ü—É—Å—Ç–æ–π –ø–ª–µ–π–ª–∏—Å—Ç",
                    color="warning",
                ),
                # embed=type_embed(type="error", description="–ü—É—Å—Ç–æ–π –ø–ª–µ–π–ª–∏—Å—Ç")
            )

        await ctx.delete_original_message()

    @playlist.autocomplete("playlist")
    async def autoplaylist(self, inter, user_input):
        results, list = self.bot.db.playlists.get_user_playlists(inter.author.id), []

        for playlist in results:
            list.append(
                disnake.OptionChoice(
                    name=playlist.get("title"), value=playlist.get("uuid")
                )
            )

        return list

    # -------------------------------------------------------------------------------------------------------------------------------------
    # –ò–∑–±—Ä–∞–Ω–Ω—ã–µ

    # TODO: Database

    @commands.slash_command(description="üü£ | –∏–∑–±—Ä–∞–Ω–Ω–æ–µ", dm_permission=False)
    async def stars(self, ctx):

        stars = self.bot.db.stars.get_stars(ctx.author.id)

        if stars and stars.get("tracks"):
            try:
                view = StarsView(
                    songs=stars.get("tracks"),
                    player=self.bot.node.get_player(ctx.guild.id),
                )
                return await view.refresh_pages(ctx)
            except BaseException:
                return await ctx.edit_original_message(
                    embed=self.bot.embedding.get(
                        title="üü† | –ü—É—Å—Ç–æ",
                        description="–£ –≤–∞—Å –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤",
                        color="warning",
                    ),
                    # embed=genembed(
                    #     title="", description="–ü–æ—Ö–æ–∂–µ, —É –≤–∞—Å –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤"
                    # )
                )

        else:
            return await ctx.edit_original_message(
                embed=self.bot.embedding.get(
                    title="üü† | –ü—É—Å—Ç–æ",
                    description="–£ –≤–∞—Å –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤",
                    color="warning",
                ),
            )

    # TODO: Database

    @check_player_decorator(with_connection=True)
    @add.sub_command(name="stars", description="üü£ | –∏–≥—Ä–∞—Ç—å (–≤–∞—à–µ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ)")
    async def play_stars(self, ctx):
        stars = self.bot.db.stars.get_stars(ctx.author.id)

        if stars and stars.get("tracks"):
            player: NoirPlayer = self.bot.node.get_player(ctx.guild_id)

            for track in stars.get("tracks"):
                try:
                    query = (await player.get_tracks(query=track.get("url"), ctx=ctx))[
                        0
                    ]

                    query.thumbnail = track.get("thumbnail")

                    await player.queue.put(query)

                    if (
                        not player.current
                    ):  # —á—Ç–æ–±—ã –Ω–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞–¥–µ—Ä–∂–∫—É, –∏–≥—Ä–∞—Ç—å –ø–µ—Ä–≤—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π
                        await player.play(player.queue.get())
                except BaseException:
                    continue

            await ctx.delete_original_message()

        else:
            await ctx.edit_original_message(
                embed=self.bot.embedding.get(
                    title="üü† | –ü—É—Å—Ç–æ",
                    description="–£ –≤–∞—Å –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤",
                    color="warning",
                ),
            )

    @check_player_decorator()
    @commands.slash_command(
        description="üü£ | –∑–≤–µ–∑–¥–∞–Ω—É—Ç—å —Ç–µ–∫—É—â–∏–π —Ç—Ä–µ–∫", dm_permission=False
    )
    async def star(self, ctx):
        player = self.bot.node.get_player(ctx.guild_id)

        if not player.current:
            raise NoCurrent("–Ω–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ —Ç—Ä–µ–∫–∞")

        if not player.current.info.isStream:
            track = player.current
            self.bot.db.stars.add_to_stars(ctx.author.id, track.model_dump())

            await ctx.send(
                embed=self.bot.embedding.get(
                    title="üü¢ | –î–æ–±–∞–≤–ª–µ–Ω–æ",
                    description="–ó–≤–µ–∑–¥–æ—á–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ `‚≠ê —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –Ω–∞–±–æ—Ä`",
                    color="accent",
                ),
                # embed=genembed(
                #     title="",
                #     description="## –ó–≤–µ–∑–¥–æ—á–∫–∞ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∞.\n\n–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –µ–µ –≤ —Å–≤–æ–µ–º [–ø—Ä–æ—Ñ–∏–ª–µ](https://noirplayer.su/me/stars).",
                # ),
                ephemeral=True,
            )
        else:
            return await ctx.delete_original_message()

    # -------------------------------------------------------------------------------------------------------------------------------------
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –æ–Ω–ª–∏ (–¥–ª—è –≤–µ–±–∞)

    @check_player_decorator(with_connection=True)
    @commands.slash_command(
        description="üü£ | –ø–æ–¥–∫–ª—é—á–∏—Ç—å Noir –∫ –≤–æ–π—Å—É", dm_permission=False
    )
    async def join(self, ctx):
        self.bot.node.get_player(ctx.guild_id)

        await ctx.delete_original_message()

    # -------------------------------------------------------------------------------------------------------------------------------------
    # –ï—Å–ª–∏ –ø–ª–µ–µ—Ä —Å—Ç–∞–∫–Ω—É–ª—Å—è

    @check_player_decorator(with_connection=True)
    @commands.slash_command(description="üî¥ | –Ω–µ–∏—Å–ø—Ä–∞–≤–µ–Ω –ø–ª–µ–µ—Ä?", dm_permission=False)
    async def fix(self, ctx):
        player = self.bot.node.get_player(ctx.guild.id)

        if player:
            try:
                await player.destroy()
            except BaseException:
                self.bot.node._players.pop(ctx.guild.id)
                if self.bot.node.is_connected:
                    await self._node.rest.send(
                        method="DELETE",
                        path=player._player_endpoint_uri,
                        guild_id=ctx.guild.id,
                    )

        await ctx.delete_original_message()


def setup(bot: commands.Bot):
    bot.add_cog(MusicCog(bot))
